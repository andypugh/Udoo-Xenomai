***************
*** 3,8 ****
   * Copyright (c) 2003-2004 Simtec Electronics
   *	Ben Dooks <ben@simtec.co.uk>
   *
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation; either version 2 of the License, or
--- 3,10 ----
   * Copyright (c) 2003-2004 Simtec Electronics
   *	Ben Dooks <ben@simtec.co.uk>
   *
+  * Copyright (C) 2006, 2007 Sebastian Smolorz <ssmolorz@emlix.com>, emlix GmbH
+  *
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation; either version 2 of the License, or
***************
*** 24,29 ****
  #include <linux/ioport.h>
  #include <linux/sysdev.h>
  #include <linux/syscore_ops.h>
  
  #include <asm/irq.h>
  #include <asm/mach/irq.h>
--- 26,32 ----
  #include <linux/ioport.h>
  #include <linux/sysdev.h>
  #include <linux/syscore_ops.h>
+ #include <linux/ipipe.h>
  
  #include <asm/irq.h>
  #include <asm/mach/irq.h>
***************
*** 88,93 ****
  	.name		= "s3c-level",
  	.irq_ack	= s3c_irq_maskack,
  	.irq_mask	= s3c_irq_mask,
  	.irq_unmask	= s3c_irq_unmask,
  	.irq_set_wake	= s3c_irq_wake
  };
--- 91,99 ----
  	.name		= "s3c-level",
  	.irq_ack	= s3c_irq_maskack,
  	.irq_mask	= s3c_irq_mask,
+ #ifdef CONFIG_IPIPE
+ 	.irq_mask_ack   = s3c_irq_maskack,
+ #endif /* CONFIG_IPIPE */
  	.irq_unmask	= s3c_irq_unmask,
  	.irq_set_wake	= s3c_irq_wake
  };
***************
*** 274,279 ****
  static struct irq_chip s3c_irq_uart0 = {
  	.name		= "s3c-uart0",
  	.irq_mask	= s3c_irq_uart0_mask,
  	.irq_unmask	= s3c_irq_uart0_unmask,
  	.irq_ack	= s3c_irq_uart0_ack,
  };
--- 280,288 ----
  static struct irq_chip s3c_irq_uart0 = {
  	.name		= "s3c-uart0",
  	.irq_mask	= s3c_irq_uart0_mask,
+ #ifdef CONFIG_IPIPE
+ 	.irq_mask_ack   = s3c_irq_uart0_ack,
+ #endif /* CONFIG_IPIPE */
  	.irq_unmask	= s3c_irq_uart0_unmask,
  	.irq_ack	= s3c_irq_uart0_ack,
  };
***************
*** 301,306 ****
  static struct irq_chip s3c_irq_uart1 = {
  	.name		= "s3c-uart1",
  	.irq_mask	= s3c_irq_uart1_mask,
  	.irq_unmask	= s3c_irq_uart1_unmask,
  	.irq_ack	= s3c_irq_uart1_ack,
  };
--- 310,318 ----
  static struct irq_chip s3c_irq_uart1 = {
  	.name		= "s3c-uart1",
  	.irq_mask	= s3c_irq_uart1_mask,
+ #ifdef CONFIG_IPIPE
+ 	.irq_mask_ack	= s3c_irq_uart1_ack,
+ #endif /* CONFIG_IPIPE */
  	.irq_unmask	= s3c_irq_uart1_unmask,
  	.irq_ack	= s3c_irq_uart1_ack,
  };
***************
*** 328,333 ****
  static struct irq_chip s3c_irq_uart2 = {
  	.name		= "s3c-uart2",
  	.irq_mask	= s3c_irq_uart2_mask,
  	.irq_unmask	= s3c_irq_uart2_unmask,
  	.irq_ack	= s3c_irq_uart2_ack,
  };
--- 340,348 ----
  static struct irq_chip s3c_irq_uart2 = {
  	.name		= "s3c-uart2",
  	.irq_mask	= s3c_irq_uart2_mask,
+ #ifdef CONFIG_IPIPE
+ 	.irq_mask_ack	= s3c_irq_uart2_ack,
+ #endif /* CONFIG_IPIPE */
  	.irq_unmask	= s3c_irq_uart2_unmask,
  	.irq_ack	= s3c_irq_uart2_ack,
  };
***************
*** 378,387 ****
  
  	if (subsrc != 0) {
  		if (subsrc & 1) {
- 			generic_handle_irq(IRQ_TC);
  		}
  		if (subsrc & 2) {
- 			generic_handle_irq(IRQ_ADC);
  		}
  	}
  }
--- 393,402 ----
  
  	if (subsrc != 0) {
  		if (subsrc & 1) {
+ 			ipipe_handle_chained_irq(IRQ_TC);
  		}
  		if (subsrc & 2) {
+ 			ipipe_handle_chained_irq(IRQ_ADC);
  		}
  	}
  }
***************
*** 406,418 ****
  
  	if (subsrc != 0) {
  		if (subsrc & 1)
- 			generic_handle_irq(start);
  
  		if (subsrc & 2)
- 			generic_handle_irq(start+1);
  
  		if (subsrc & 4)
- 			generic_handle_irq(start+2);
  	}
  }
  
--- 421,433 ----
  
  	if (subsrc != 0) {
  		if (subsrc & 1)
+ 			ipipe_handle_chained_irq(start);
  
  		if (subsrc & 2)
+ 			ipipe_handle_chained_irq(start+1);
  
  		if (subsrc & 4)
+ 			ipipe_handle_chained_irq(start+2);
  	}
  }
  
***************
*** 459,465 ****
  		eintpnd &= ~(1<<irq);
  
  		irq += (IRQ_EINT4 - 4);
- 		generic_handle_irq(irq);
  	}
  
  }
--- 474,480 ----
  		eintpnd &= ~(1<<irq);
  
  		irq += (IRQ_EINT4 - 4);
+ 		ipipe_handle_chained_irq(irq);
  	}
  
  }
***************
*** 482,488 ****
  
  		irq += (IRQ_EINT4 - 4);
  
- 		generic_handle_irq(irq);
  	}
  }
  
--- 497,503 ----
  
  		irq += (IRQ_EINT4 - 4);
  
+ 		ipipe_handle_chained_irq(irq);
  	}
  }
  
***************
*** 605,611 ****
  		default:
  			//irqdbf("registering irq %d (s3c irq)\n", irqno);
  			irq_set_chip_and_handler(irqno, &s3c_irq_chip,
- 						 handle_edge_irq);
  			set_irq_flags(irqno, IRQF_VALID);
  		}
  	}
--- 620,626 ----
  		default:
  			//irqdbf("registering irq %d (s3c irq)\n", irqno);
  			irq_set_chip_and_handler(irqno, &s3c_irq_chip,
+ 						 handle_level_irq);
  			set_irq_flags(irqno, IRQF_VALID);
  		}
  	}
***************
*** 625,638 ****
  	for (irqno = IRQ_EINT0; irqno <= IRQ_EINT3; irqno++) {
  		irqdbf("registering irq %d (ext int)\n", irqno);
  		irq_set_chip_and_handler(irqno, &s3c_irq_eint0t4,
- 					 handle_edge_irq);
  		set_irq_flags(irqno, IRQF_VALID);
  	}
  
  	for (irqno = IRQ_EINT4; irqno <= IRQ_EINT23; irqno++) {
  		irqdbf("registering irq %d (extended s3c irq)\n", irqno);
  		irq_set_chip_and_handler(irqno, &s3c_irqext_chip,
- 					 handle_edge_irq);
  		set_irq_flags(irqno, IRQF_VALID);
  	}
  
--- 640,653 ----
  	for (irqno = IRQ_EINT0; irqno <= IRQ_EINT3; irqno++) {
  		irqdbf("registering irq %d (ext int)\n", irqno);
  		irq_set_chip_and_handler(irqno, &s3c_irq_eint0t4,
+ 					 handle_level_irq);
  		set_irq_flags(irqno, IRQF_VALID);
  	}
  
  	for (irqno = IRQ_EINT4; irqno <= IRQ_EINT23; irqno++) {
  		irqdbf("registering irq %d (extended s3c irq)\n", irqno);
  		irq_set_chip_and_handler(irqno, &s3c_irqext_chip,
+ 					 handle_level_irq);
  		set_irq_flags(irqno, IRQF_VALID);
  	}
  
***************
*** 663,669 ****
  
  	for (irqno = IRQ_TC; irqno <= IRQ_ADC; irqno++) {
  		irqdbf("registering irq %d (s3c adc irq)\n", irqno);
- 		irq_set_chip_and_handler(irqno, &s3c_irq_adc, handle_edge_irq);
  		set_irq_flags(irqno, IRQF_VALID);
  	}
  
--- 678,684 ----
  
  	for (irqno = IRQ_TC; irqno <= IRQ_ADC; irqno++) {
  		irqdbf("registering irq %d (s3c adc irq)\n", irqno);
+ 		irq_set_chip_and_handler(irqno, &s3c_irq_adc, handle_level_irq);
  		set_irq_flags(irqno, IRQF_VALID);
  	}
  
