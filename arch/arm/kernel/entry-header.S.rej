***************
*** 22,28 ****
  @
  #define S_OFF		8
  
- /* 
   * The SWI code relies on the fact that R0 is at the bottom of the stack
   * (due to slow/fast restore user regs).
   */
--- 22,28 ----
  @
  #define S_OFF		8
  
+ /*
   * The SWI code relies on the fact that R0 is at the bottom of the stack
   * (due to slow/fast restore user regs).
   */
***************
*** 75,80 ****
  
  #ifndef CONFIG_THUMB2_KERNEL
  	.macro	svc_exit, rpsr
  	msr	spsr_cxsf, \rpsr
  #if defined(CONFIG_CPU_V6)
  	ldr	r0, [sp]
--- 75,89 ----
  
  #ifndef CONFIG_THUMB2_KERNEL
  	.macro	svc_exit, rpsr
+ #ifdef CONFIG_IPIPE_TRACE_IRQSOFF
+ 	mov	r4, \rpsr
+ 	mov	r0, #2		/* IPIPE_TRACE_END */
+ 	mov	r3, #0x90000000
+ 	ldr	r2, [sp, #S_PC]
+ 	mov	r1, pc
+ 	bl	ipipe_trace_asm
+ 	mov	\rpsr, r4
+ #endif /* CONFIG_IPIPE_TRACE_IRQSOFF */
  	msr	spsr_cxsf, \rpsr
  #if defined(CONFIG_CPU_V6)
  	ldr	r0, [sp]
***************
*** 89,94 ****
  	.endm
  
  	.macro	restore_user_regs, fast = 0, offset = 0
  	ldr	r1, [sp, #\offset + S_PSR]	@ get calling cpsr
  	ldr	lr, [sp, #\offset + S_PC]!	@ get pc
  	msr	spsr_cxsf, r1			@ save in spsr_svc
--- 98,116 ----
  	.endm
  
  	.macro	restore_user_regs, fast = 0, offset = 0
+ #ifdef CONFIG_IPIPE_TRACE_IRQSOFF
+ 	.if	\fast
+ 	mov	r4, r0
+ 	.endif
+ 	mov	r0, #2		/* IPIPE_TRACE_END */
+ 	mov	r3, #0x90000000
+ 	ldr	r2, [sp, #\offset + S_PC]
+ 	mov	r1, pc
+ 	bl	ipipe_trace_asm
+ 	.if	\fast
+ 	mov	r0, r4
+ 	.endif
+ #endif /* CONFIG_IPIPE_TRACE_IRQSOFF */
  	ldr	r1, [sp, #\offset + S_PSR]	@ get calling cpsr
  	ldr	lr, [sp, #\offset + S_PC]!	@ get pc
  	msr	spsr_cxsf, r1			@ save in spsr_svc
***************
*** 184,189 ****
  #endif
  	.endm
  
  /*
   * These are the registers used in the syscall handler, and allow us to
   * have in theory up to 7 arguments to a function - r0 to r6.
--- 206,217 ----
  #endif
  	.endm
  
+ 	.macro slow_restore_user_regs
+ 	/* perform architecture specific actions before user return */
+ 	arch_ret_to_user r1, lr
+ 	restore_user_regs fast = 0, offset = 0
+        .endm
+ 
  /*
   * These are the registers used in the syscall handler, and allow us to
   * have in theory up to 7 arguments to a function - r0 to r6.
