***************
*** 10,99 ****
   */
  #if __LINUX_ARM_ARCH__ >= 6
  
- static inline unsigned long arch_local_irq_save(void)
- {
- 	unsigned long flags;
- 
- 	asm volatile(
- 		"	mrs	%0, cpsr	@ arch_local_irq_save\n"
- 		"	cpsid	i"
- 		: "=r" (flags) : : "memory", "cc");
- 	return flags;
- }
- 
- static inline void arch_local_irq_enable(void)
- {
- 	asm volatile(
- 		"	cpsie i			@ arch_local_irq_enable"
- 		:
- 		:
- 		: "memory", "cc");
- }
  
- static inline void arch_local_irq_disable(void)
- {
- 	asm volatile(
- 		"	cpsid i			@ arch_local_irq_disable"
- 		:
- 		:
- 		: "memory", "cc");
- }
  
- #define local_fiq_enable()  __asm__("cpsie f	@ __stf" : : : "memory", "cc")
- #define local_fiq_disable() __asm__("cpsid f	@ __clf" : : : "memory", "cc")
  #else
  
  /*
   * Save the current interrupt enable state & disable IRQs
   */
- static inline unsigned long arch_local_irq_save(void)
- {
- 	unsigned long flags, temp;
- 
- 	asm volatile(
- 		"	mrs	%0, cpsr	@ arch_local_irq_save\n"
- 		"	orr	%1, %0, #128\n"
- 		"	msr	cpsr_c, %1"
- 		: "=r" (flags), "=r" (temp)
- 		:
- 		: "memory", "cc");
- 	return flags;
- }
  
  /*
   * Enable IRQs
   */
- static inline void arch_local_irq_enable(void)
- {
- 	unsigned long temp;
- 	asm volatile(
- 		"	mrs	%0, cpsr	@ arch_local_irq_enable\n"
- 		"	bic	%0, %0, #128\n"
- 		"	msr	cpsr_c, %0"
- 		: "=r" (temp)
- 		:
- 		: "memory", "cc");
- }
  
  /*
   * Disable IRQs
   */
- static inline void arch_local_irq_disable(void)
- {
- 	unsigned long temp;
- 	asm volatile(
- 		"	mrs	%0, cpsr	@ arch_local_irq_disable\n"
- 		"	orr	%0, %0, #128\n"
- 		"	msr	cpsr_c, %0"
- 		: "=r" (temp)
- 		:
- 		: "memory", "cc");
- }
  
  /*
   * Enable FIQs
   */
- #define local_fiq_enable()					\
  	({							\
  		unsigned long temp;				\
  	__asm__ __volatile__(					\
--- 10,80 ----
   */
  #if __LINUX_ARM_ARCH__ >= 6
  
+ #define local_irq_save_hw_notrace(x)					\
+ 	({							\
+ 	__asm__ __volatile__(					\
+ 	"mrs	%0, cpsr		@ local_irq_save_hw\n"	\
+ 	"cpsid	i"						\
+ 	: "=r" (x) : : "memory", "cc");				\
+ 	})
  
+ #define local_irq_enable_hw_notrace()  __asm__("cpsie i	@ __sti" : : : "memory", "cc")
+ #define local_irq_disable_hw_notrace() __asm__("cpsid i	@ __cli" : : : "memory", "cc")
+ #define local_fiq_enable_hw_notrace()  __asm__("cpsie f	@ __stf" : : : "memory", "cc")
+ #define local_fiq_disable_hw_notrace() __asm__("cpsid f	@ __clf" : : : "memory", "cc")
  
  #else
  
  /*
   * Save the current interrupt enable state & disable IRQs
   */
+ #define local_irq_save_hw_notrace(x)					\
+ 	({							\
+ 		unsigned long temp;				\
+ 		(void) (&temp == &x);				\
+ 	__asm__ __volatile__(					\
+ 	"mrs	%0, cpsr		@ local_irq_save_hw\n"	\
+ "	orr	%1, %0, #128\n"					\
+ "	msr	cpsr_c, %1"					\
+ 	: "=r" (x), "=r" (temp)					\
+ 	:							\
+ 	: "memory", "cc");					\
+ 	})
  
  /*
   * Enable IRQs
   */
+ #define local_irq_enable_hw_notrace()				\
+ 	({							\
+ 		unsigned long temp;				\
+ 	__asm__ __volatile__(					\
+ 	"mrs	%0, cpsr		@ local_irq_enable_hw\n"	\
+ "	bic	%0, %0, #128\n"					\
+ "	msr	cpsr_c, %0"					\
+ 	: "=r" (temp)						\
+ 	:							\
+ 	: "memory", "cc");					\
+ 	})
  
  /*
   * Disable IRQs
   */
+ #define local_irq_disable_hw_notrace()				\
+ 	({							\
+ 		unsigned long temp;				\
+ 	__asm__ __volatile__(					\
+ 	"mrs	%0, cpsr		@ local_irq_disable_hw\n"	\
+ "	orr	%0, %0, #128\n"					\
+ "	msr	cpsr_c, %0"					\
+ 	: "=r" (temp)						\
+ 	:							\
+ 	: "memory", "cc");					\
+ 	})
  
  /*
   * Enable FIQs
   */
+ #define local_fiq_enable_hw_notrace()				\
  	({							\
  		unsigned long temp;				\
  	__asm__ __volatile__(					\
***************
*** 108,114 ****
  /*
   * Disable FIQs
   */
- #define local_fiq_disable()					\
  	({							\
  		unsigned long temp;				\
  	__asm__ __volatile__(					\
--- 89,95 ----
  /*
   * Disable FIQs
   */
+ #define local_fiq_disable_hw_notrace()				\
  	({							\
  		unsigned long temp;				\
  	__asm__ __volatile__(					\
***************
*** 125,155 ****
  /*
   * Save the current interrupt enable state.
   */
- static inline unsigned long arch_local_save_flags(void)
- {
- 	unsigned long flags;
- 	asm volatile(
- 		"	mrs	%0, cpsr	@ local_save_flags"
- 		: "=r" (flags) : : "memory", "cc");
- 	return flags;
- }
  
  /*
   * restore saved IRQ & FIQ state
   */
- static inline void arch_local_irq_restore(unsigned long flags)
  {
- 	asm volatile(
- 		"	msr	cpsr_c, %0	@ local_irq_restore"
- 		:
- 		: "r" (flags)
- 		: "memory", "cc");
  }
  
- static inline int arch_irqs_disabled_flags(unsigned long flags)
  {
- 	return flags & PSR_I_BIT;
  }
  
  #endif
  #endif
--- 106,235 ----
  /*
   * Save the current interrupt enable state.
   */
+ #define local_save_flags_hw(x)					\
+ 	({							\
+ 	__asm__ __volatile__(					\
+ 	"mrs	%0, cpsr		@ local_save_flags_hw"	\
+ 	: "=r" (x) : : "memory", "cc");				\
+ 	})
  
  /*
   * restore saved IRQ & FIQ state
   */
+ #define local_irq_restore_hw_notrace(x)				\
+ 	__asm__ __volatile__(					\
+ 	"msr	cpsr_c, %0		@ local_irq_restore_hw\n"	\
+ 	:							\
+ 	: "r" (x)						\
+ 	: "memory", "cc")
+ 
+ #define arch_irqs_disabled_flags(_flags)	\
+ ({					\
+ 	(int)((_flags) & PSR_I_BIT);	\
+ })
+ 
+ #define irqs_disabled_hw()			\
+ ({						\
+ 	unsigned long _flags;			\
+ 	local_save_flags_hw(_flags);		\
+ 	arch_irqs_disabled_flags(_flags);		\
+ })
+ 
+ static inline unsigned long arch_mangle_irq_bits(int virt, unsigned long real)
  {
+ 	/* Merge virtual and real interrupt mask bits into a single
+ 	   32bit word. */
+ 	return (real & ~(1L << 8)) | ((virt != 0) << 8);
  }
  
+ static inline int arch_demangle_irq_bits(unsigned long *x)
  {
+ 	int virt = (*x & (1 << 8)) != 0;
+ 	*x &= ~(1L << 8);
+ 	return virt;
  }
  
+ #ifdef CONFIG_IPIPE
+ 
+ void __ipipe_unstall_root(void);
+ void __ipipe_restore_root(unsigned long flags);
+ 
+ #define arch_local_save_flags() (__ipipe_test_root() << 7)
+ #define arch_local_irq_save() (__ipipe_test_and_stall_root() << 7)
+ #define arch_local_irq_restore(flags) (__ipipe_restore_root(flags & (1 << 7)))
+ #define arch_local_irq_disable() __ipipe_stall_root()
+ #define arch_local_irq_enable() __ipipe_unstall_root()
+ #define local_fiq_enable() __ipipe_unstall_root()
+ #define local_fiq_disable() __ipipe_stall_root()
+ 
+ #ifdef CONFIG_IPIPE_TRACE_IRQSOFF
+ 
+ #include <linux/ipipe_trace.h>
+ 
+ #define local_irq_disable_hw() do { \
+ 	if (!irqs_disabled_hw()) { \
+ 		local_irq_disable_hw_notrace(); \
+ 		ipipe_trace_begin(0x80000000); \
+ 	} \
+ } while (0)
+ #define local_irq_enable_hw() do { \
+ 	if (irqs_disabled_hw()) { \
+ 		ipipe_trace_end(0x80000000); \
+ 		local_irq_enable_hw_notrace(); \
+ 	} \
+ } while (0)
+ #define local_irq_save_hw(x) do { \
+ 	local_save_flags_hw(x); \
+ 	if (!arch_irqs_disabled_flags(x)) { \
+ 		local_irq_disable_hw_notrace(); \
+ 		ipipe_trace_begin(0x80000001); \
+ 	} \
+ } while (0)
+ #define local_irq_restore_hw(x) do { \
+ 	if (!arch_irqs_disabled_flags(x)) \
+ 		ipipe_trace_end(0x80000001); \
+ 	local_irq_restore_hw_notrace(x); \
+ } while (0)
+ 
+ #else /* !CONFIG_IPIPE_TRACE_IRQSOFF */
+ 
+ #define local_irq_save_hw(flags)	local_irq_save_hw_notrace(flags)
+ #define local_irq_enable_hw()		local_irq_enable_hw_notrace()
+ #define local_irq_disable_hw()		local_irq_disable_hw_notrace()
+ #define local_fiq_enable_hw()		local_fiq_enable_hw_notrace()
+ #define local_fiq_disable_hw()		local_fiq_disable_hw_notrace()
+ #define local_irq_restore_hw(flags)	local_irq_restore_hw_notrace(flags)
+ 
+ #endif /* CONFIG_IPIPE_TRACE_IRQSOFF */
+ 
+ #else /* !CONFIG_IPIPE */
+ 
+ #define arch_local_save_flags()			\
+ 	({					\
+ 		unsigned long _flags;		\
+ 		local_save_flags_hw(_flags);	\
+ 		(_flags);			\
+ 	})
+ #define arch_local_irq_save()			\
+ 	({					\
+ 		unsigned long _flags;		\
+ 		local_irq_save_hw(_flags);	\
+ 		(_flags);			\
+ 	})
+ #define arch_local_irq_restore(flags) local_irq_restore_hw_notrace(flags)
+ #define arch_local_irq_disable() local_irq_disable_hw_notrace()
+ #define arch_local_irq_enable() local_irq_enable_hw_notrace()
+ #define local_fiq_enable() local_fiq_enable_hw_notrace()
+ #define local_fiq_disable() local_fiq_disable_hw_notrace()
+ 
+ #define local_irq_save_hw(flags)	local_irq_save_hw_notrace(flags)
+ #define local_irq_enable_hw()		local_irq_enable_hw_notrace()
+ #define local_irq_disable_hw()		local_irq_disable_hw_notrace()
+ #define local_fiq_enable_hw()		local_fiq_enable_hw_notrace()
+ #define local_fiq_disable_hw()		local_fiq_disable_hw_notrace()
+ #define local_irq_restore_hw(flags)	local_irq_restore_hw_notrace(flags)
+ 
+ #endif /* CONFIG_IPIPE */
+ 
  #endif
  #endif
